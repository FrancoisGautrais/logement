"""
Django settings for logement project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import json
import os
import logement.startup

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
from firebase_admin import initialize_app

BASE_DIR = Path(__file__).resolve().parent.parent

os.environ["GOOGLE_APPLICATION_CREDENTIALS"]=str(BASE_DIR/ "conf" /"key.json")
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-lgvtx5is(8&nejfxxckybss-r!5hhbd7qc^gyhr#)wr-8k5^9d'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['192.168.1.105', "localhost", "127.0.0.1"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'portail',
    "fcm_django"
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'logement.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'logement.wsgi.application'

ERROR_FILE = BASE_DIR / "errors.log"

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CRITERES = {
    "loyer.min" : 550,
    "loyer.max" : 950,
    "surface.min" : 55,
    "surface.max" : 90,
    "words.include" : (BASE_DIR / "conf" / "include"),
    "words.exclude" : (BASE_DIR / "conf" / "exclude"),
    "score.min" : 0
}
EMAILS=[]

DOMAIN = "logement.gautrais.eu"

for k, v in json.loads((BASE_DIR / "conf/conf.json").read_text()).items():
    exec(f"{k} = {json.dumps(v)}")


DATA_PATH = BASE_DIR / "data"

if not DATA_PATH.is_dir():
    DATA_PATH.mkdir(parents=True)

CACHE_PATH = DATA_PATH / "cache"


if not CACHE_PATH.is_dir():
    CACHE_PATH.mkdir(parents=True)


PASSWORD_FILE = BASE_DIR / "conf/password"


PASSWORD = PASSWORD_FILE.read_text().split("\n")[0]
if not len(PASSWORD):
    print(f"Merci de rensigner le mot de passe dans {PASSWORD_FILE.resolve()}")
    exit(0)


FIREBASE_APP = initialize_app()
FCM_APIKEY = " AIzaSyAap-Z8-VkpcdbbTnRT3cPIZm9KtrJUdYM"
FCM_DJANGO_SETTINGS = {
     # default: _('FCM Django')
    "APP_VERBOSE_NAME": "Mon Application",
     # true if you want to have only one active device per registered user at a time
     # default: False
    "ONE_DEVICE_PER_USER": True,
     # devices to which notifications cannot be sent,
     # are deleted upon receiving error response from FCM
     # default: False
    "DELETE_INACTIVE_DEVICES": False,
    # Transform create of an existing Device (based on registration id) into
                # an update. See the section
    # "Update of device with duplicate registration ID" for more details.
    "UPDATE_ON_DUPLICATE_REG_ID": True,
}

STATICFILES_DIRS = [
    BASE_DIR / "www" / "static",
]

"""
"""
LOGIN_URL = "/login"
LOGIN_REDIRECT_URL = "/"
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_COOKIE_AGE = 3600 * 24 * 365